The bulkLoadES.py Python program was developed using Python version 3.7.0.
For development the Anacaonda Python distribution was installed, to provide
a stable Python environment. 

===========================================================================
                              Installing Python
===========================================================================
The steps below may not be necessary, if you are not using the Anaconda
distribution. But what is important is to use Python 3.7, and the following
packages must be installed:

> pip install requests
> pip install python-dotenv
> pip install elasticsearch

---------------------------------------------------------------------------
                            Optional for Anaconda Python
---------------------------------------------------------------------------
For testing, a conda enviroment was created using the following command:

> conda create -n BulkLoadES python=3.7
> source activate BulkLoadES
> pip install requests
> pip install python-dotenv
> pip install elasticsearch

===========================================================================
                           Environment Variables
===========================================================================
The bulkLoadES.py program uses a ".env" file and the "dotenv" Python 
module to load in several environment variables, that are used to 
control output location, number of processes etc. Sample ".env" file
is outlined below.

API_ENDPOINT:          EvsRestAPI endpoint.
CONCEPT_OUTPUT_DIR:    Directory location for output files.
CONCEPT_INPUT_DIR:     Directory location for input files.
ES_HOST:               ElasticSearch host.
ES_PORT:               ElasticSearch port.
INDEX_MAPPING_FILE     ElasticSearch json file for creating a new Index.
LOG_DIRECTORY          Directory location for log files.
MULTI_PROCESSING_POOL: Number of processed to use when downloading concepts.
                       This should be adjusted based on the number of
                       processors available on the machine.
NAMED_GRAPH:           The named graph in the StarDog triple store.
SPARQL_ENDPOINT:       The StarDog triple store endpoint.

---------------------------------------------------------------------------
                           Sample .env contents 
---------------------------------------------------------------------------
API_ENDPOINT=http://localhost:8080/api/v1/concept/
CONCEPT_OUTPUT_DIR=/home/USER/Data/EVS/ConceptByLabel/
CONCEPT_INPUT_DIR=/home/USER/Data/EVS/ConceptByLabel/
ES_HOST=localhost
ES_PORT=9200
INDEX_MAPPING_FILE=/home/USER/Data/EVS/Mappings/concept_flat_full_nested_bylabel.json
LOG_DIRECTORY=/home/USER/Data/EVS/Log/
MULTI_PROCESSING_POOL=4
NAMED_GRAPH=http://NCI_T
SPARQL_ENDPOINT=http://localhost:5820/NCIT2/query
STARDOG_USERNAME=admin
STARDOG_PASSWORD=admin

---------------------------------------------------------------------------
                           Program Options
---------------------------------------------------------------------------
--index_name      - name to assign to the ElasticSearch index.

--drop_index      - boolean flag to indicate whether to drop an existing
                    ElasticSearch index, before the index is created as a
                    new index. Use this flag, if you are sure you do not
                    need to keep the existing index and want to create
                    a new index. 
 
                    The default behavior for the program if this flag is 
                    not used, is to use an existing index if it already
                    exists, or if it does not exist to create a new
                    index.

--download_only   - boolean flag to download the concepts using the EVS
                    RestAPI, but do NOT load into ElasticSearch. Since this
                    process can take a long time, you may want to use this
                    option to prepare the input files before attempting to
                    load into ElasticSearch. If you need to load concepts into 
                    multiple instances of ElasticSearch, this is a good
                    option to generate the files once, then use the same
                    set of files to load into multiple ElasticSearch
                    instances.

--no_download     - boolean flag to NOT download the concepts first, because
                    you may have already run the program using the 
                    --download-only flag, so the concept files already 
                    exist.

--load_real_time  - boolean flag is used if you want to interweave the
                    download from EVS RestAPI with the upload into 
                    ElasticSearch. This is more of an experimental option.

--delete_document - boolean flag used to delete documents that exist in
                    the ElasticSearch index, but no longer exist via the
                    EvsRestAPI. 

---------------------------------------------------------------------------
                           Example Program Option 1
---------------------------------------------------------------------------
bulkLoadES.py --index_name concept --delete_document

  This version tries to use an existing ElasticSearch index, and if does
  not exit, then creates a new index using the file indicated by the
  INDEX_MAPPING_FILE environment variable.

  The next step is to download all the concepts using the EVS RestAPI, then
  upload the concepts into the ElasticSearch index. Finally, the concepts
  that only exist in the ElasticSearch index, but do not exist in the 
  concepts downloaded from the EVS RestAPI are deleted.

---------------------------------------------------------------------------
                           Example Program Option 2
---------------------------------------------------------------------------
In this case you may want to separate the download and upload processes
into 2 steps. After the initial download you may want to check this
step completed properly, before starting the process to upload the
concepts into ElasticSearch.

bulkLoadES.py --index_name concept_test --download_only
bulkLoadES.py --index_name concept_test --no_download --delete_document

---------------------------------------------------------------------------
                           Example Program Option 3
---------------------------------------------------------------------------
In this case you may want to separate the download and upload processes
into 2 steps. After the initial download you may want to check this
step completed properly, before starting the process to upload the
concepts into ElasticSearch.

Finally using the --drop_index option ensures you are starting with an
empty ElasticSearch index.

bulkLoadES.py --index_name concept_test --download_only
bulkLoadES.py --index_name concept_test --no_download --drop_index

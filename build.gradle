buildscript {

    repositories {
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE"
    }
}

/*
 * Extra Properties
 */
ext {
    /*
     * IMPORTANT NOTE ABOUT WEBJARS: 
     * 
     * Webjars could not be found for the following third-party software:
     *
     * org.webjars.bower:github-com-adonespitogo-angular-loading-spinner-v0.0.1 - Version v0.0.3 was used instead.
     *
     * angular-datepicker-0.2.4 - The original files from the "external" directory tree were renamed to include
     *                            the version number and copied to the applications's "js" and "css" directories.
     *
     * angular-file-saver-1.1.1 - The original files from the "external" directory tree were renamed to include 
     *                            the version number and copied to the applications's "js" and "css" directories.
     */

   
  

   
    
    
    
    
    

    /*
     * Remote Repositories
     */
    repositoryBaseUrl = "http://ec2-54-208-32-8.compute-1.amazonaws.com:8081/nexus/content"
    defaultRepositoryUrl = "$repositoryBaseUrl/groups/public"
    snapshotRepositoryUrl = "$repositoryBaseUrl/repositories/snapshots"
    releaseRepositoryUrl = "$repositoryBaseUrl/repositories/releases"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'war'

group = "gov.nih.nci.evs.api"
version = "1.0.0-SNAPSHOT"

sourceCompatibility = 1.8
targetCompatibility = 1.8

springBoot {
    backupSource = false // do not backup original jar to *.original
}

repositories {
    mavenLocal()
    maven { url "$defaultRepositoryUrl" }
    jcenter()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
    mavenCentral()
}



dependencies {
   
   
    compile 'org.springframework.boot:spring-boot-starter-web'       
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.projectlombok:lombok'
     
     
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    /*
     * This dependency is included to auto-configure class HttpComponentsClientHttpRequestFactory
     * as the implementation used for the ClientHttpRequestFactory interface
     */
   

  
    
    
    
     /*
     * Test Dependencies
     */
    testCompile 'org.springframework.boot:spring-boot-starter-test'
   

}

jar {
    baseName = project.name
    version =  project.version
}

test {
    /*
     * Configure gradle to show standard out and standard error
     * of the test JVM(s) on the console
     */
    testLogging.showStandardStreams = true
}



task zipFile(type: Zip) {
    def zipFileRootDirectory = "${project.name}-${project.version}"

    from('src/main/bin') {
        fileMode = 0755
        into "$zipFileRootDirectory/bin"
    }
    from("$buildDir/main/bin") {
        fileMode = 0755
        include '**/createDirectoriesForWorkspace.pl'
        into "$zipFileRootDirectory/bin"
    }
    from('src/main/config') {
        into "${baseName}-${project.version}/config"
        into "$zipFileRootDirectory/config"
    }
    from("$buildDir/main/config") {
        include '**/createDirectories.properties'
        into "$zipFileRootDirectory/config"
    }
    from("$buildDir/libs") {
        include '*.jar'
        into "$zipFileRootDirectory/lib"
    }
    rename { String fileName ->
        fileName.replace("-${project.version}", "")
    }
}

task bootJar
bootJar.dependsOn = [jar, bootRepackage]
build.dependsOn = [ bootJar, test, zipFile ]
install.dependsOn = [ bootJar,test, zipFile ]

publishing {

    publications {
        artifacts(MavenPublication) {
            artifact ("$buildDir/libs/${project.name}-${project.version}.jar") {
                classifier = null
            }
            artifact ("$buildDir/distributions/${project.name}-${project.version}.zip") {
                classifier = null
            }
        }
    }

    repositories {
        maven {
            name 'remote'
            url project.version.endsWith('-SNAPSHOT') ?
                snapshotRepositoryUrl : releaseRepositoryUrl
            credentials {
                username = remoteRepositoryUsername
                password = remoteRepositoryPassword
            }
        }
    }
}




/*
 * Wrapper task
 */
task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}
